package io.finloop.haptickt;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.core.env.AbstractEnvironment;
import org.springframework.core.env.Environment;
import org.springframework.core.env.MapPropertySource;
import org.springframework.core.env.PropertySource;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.core.env.Environment;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;

import io.finloop.haptickt.entities.ProductEntity;
import io.finloop.haptickt.repository.ProductRepository;
import lombok.extern.slf4j.Slf4j;


@RestController
@RequestMapping("/")
@EnableAutoConfiguration
@Slf4j
public class ProductController {
	
	
	@Autowired
	private Environment env;
	
	@Autowired
	private ProductRepository productRepo;
		
	@HystrixCommand(
			fallbackMethod = "getCacheDBProductDataCommand",
			groupKey = "listProducts", commandKey = "listProducts", threadPoolKey = "listProducts", 
			commandProperties = {
				@HystrixProperty(name = "execution.isolation.strategy", value = "THREAD"),
		        @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "30000"),
		        @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "4"),
		        @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "60000"),
		        @HystrixProperty(name = "metrics.rollingStats.timeInMilliseconds", value = "180000") 
		    }, 
			threadPoolProperties = {
		        @HystrixProperty(name = "coreSize", value = "30"),
		        @HystrixProperty(name = "metrics.rollingStats.timeInMilliseconds", value = "180000") 
		     }
	)		
	@GetMapping(path = "/products",  produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<ProductEntity> getProducts() {
		List<ProductEntity> products = productRepo.findAll();
		products.add(ProductEntity.builder().id(100l).name("Info Product").description("From Port " + env.getProperty("server.port")).build());
		log.info("sending data from service" + products);
		return products;
	}
	
	
	private List<ProductEntity> getCacheDBProductDataCommand() {
		List<ProductEntity> l = new ArrayList<>();
		l.add(ProductEntity.builder().id(4L).name("FallBack").description("Static fallback product").build());
		l.add(ProductEntity.builder().id(1L).name("Info Prod").description("from " + env.getProperty("local.server.port")).build());
		l.add(ProductEntity.builder().id(2L).name("First Prod").description("First Description").build());
		l.add(ProductEntity.builder().id(3L).name("Second Prod").description("Second Description").build());
		return l;
	}
	
	
	
	
}